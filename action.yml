name: Compute Bumped Version
description: >
  Computes the next semantic version based on commit messages and changed files since the last version tag.

inputs:
  force-patch-if-no-commit-token:
    description: Force patch bump if no [major], [minor], [patch], or [fix] found in commit message(s)
    required: false
    default: "false"
  ignore-paths:
    description: Newline-delimited list of file/directory globs to ignore when checking changed files
    required: false
    default: ""

outputs:
  version:
    description: The next semantic version (empty string if no bump is needed)
    value: ${{ steps.output-version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Is this most recent commit?
      shell: bash
      run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        git fetch --tags &> /dev/null
        if git status -sb | grep behind; then
          echo "::warning::This commit is not the most recent on this branch — rest of workflow should be halted."
          exit 1
        fi

    - name: Get the latest version tag
      shell: bash
      run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        _latest_semver_tag=$(git tag --sort=-creatordate | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || true)
        echo "Latest semantic-version style tag: $_latest_semver_tag"
        echo "LATEST_SEMVER_TAG=$_latest_semver_tag" >> "$GITHUB_ENV"
        if [ -n "$_latest_semver_tag" ]; then
          echo "LATEST_SEMVER_TAG_NO_V=${_latest_semver_tag#v}" >> "$GITHUB_ENV"
        fi

    - name: Handle no previous tag (first release case)
      if: env.LATEST_SEMVER_TAG == ''
      id: output-version
      shell: bash
      run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        echo "No previous semver tag found — using 0.0.0."
        echo "version=0.0.0" >> "$GITHUB_OUTPUT"

    - name: Validate latest tag ancestry
      if: env.LATEST_SEMVER_TAG != ''
      shell: bash
      run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        _latest_tag_sha=$(git rev-parse "$LATEST_SEMVER_TAG")
        echo "Latest tag SHA: $_latest_tag_sha"
        echo "LATEST_TAG_SHA=$_latest_tag_sha" >> "$GITHUB_ENV"

        if [[ "$_latest_tag_sha" == "$GITHUB_SHA" ]]; then
          echo "::warning::This commit ($GITHUB_SHA) is already tagged ($LATEST_SEMVER_TAG) — no bump needed."
          echo "version=" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        if ! git merge-base --is-ancestor "$_latest_tag_sha" "$GITHUB_SHA"; then
          echo "::warning::The latest tag ($LATEST_SEMVER_TAG -> $_latest_tag_sha) is not an ancestor of this commit ($GITHUB_SHA)."
          echo "::warning::This suggests the tag may be from a newer commit — cannot bump version."
          echo "version=" >> "$GITHUB_OUTPUT"
          exit 0
        fi

    - name: Find changed files
      if: env.LATEST_SEMVER_TAG != '' && env.LATEST_TAG_SHA != ''
      shell: bash
      run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        ### get first commit since latest version tag
        
        FIRST_COMMIT=$(git rev-list -n 1 "$LATEST_SEMVER_TAG")
        echo "Looking at what's changed since $LATEST_SEMVER_TAG / $FIRST_COMMIT..."
        echo
        
        # -> env
        echo "FIRST_COMMIT=$FIRST_COMMIT" >> "$GITHUB_ENV"
        
        ### get all the changed file (paths)
        
        CHANGED_FILES=$(git diff --name-only "$FIRST_COMMIT"..HEAD)  # has newlines
        echo "Changed files:"
        echo "<start>"
        echo "$CHANGED_FILES"
        echo "<end>"
        echo
        
        # -> env
        echo "CHANGED_FILES<<EOF" >> "$GITHUB_ENV"
        echo "$CHANGED_FILES" >> "$GITHUB_ENV"
        echo "EOF" >> "$GITHUB_ENV"
        
        ### NOTE: commit logs are retrieved in python script b/c newlines are a pain 

    - name: Compute next version
      env:
        FORCE_PATCH_IF_NO_COMMIT_TOKEN: ${{ inputs.force-patch-if-no-commit-token }}
        IGNORE_PATHS: ${{ inputs.ignore-paths }}
        FIRST_COMMIT: ${{ env.FIRST_COMMIT }}
        CHANGED_FILES: ${{ env.CHANGED_FILES }}
      shell: bash
      run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        VERSION=$(python ${{ github.action_path }}/compute_next_version.py)
        echo "Computed version: $VERSION"
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"

    - id: output-version
      shell: bash
      run: |
        set -euo pipefail
        echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        # last minute check that branch has not been updated        
        git fetch &> /dev/null
        if git status -sb | grep behind; then
          echo "::warning::This commit is no longer the most recent — aborting."
          exit 0
        fi
        
        # output!
        if [ -z "${{ env.VERSION }}" ]; then
          echo "No version bump needed."
          echo "version=" >> "$GITHUB_OUTPUT"
        else
          echo "Next version: ${{ env.VERSION }}"
          echo "version=${{ env.VERSION }}" >> "$GITHUB_OUTPUT"
        fi
